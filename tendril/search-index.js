var searchIndex = {};
searchIndex['tendril'] = {"items":[[0,"","tendril","",null,null],[3,"Tendril","","Compact string type for zero-copy parsing.",null,null],[4,"SubtendrilError","","Errors that can occur when slicing a `Tendril`.",null,null],[13,"OutOfBounds","","",0,null],[13,"ValidationFailed","","",0,null],[0,"fmt","","Marker types for formats.",null,null],[3,"Bytes","tendril::fmt","Marker type for uninterpreted bytes.",null,null],[3,"ASCII","","Marker type for ASCII text.",null,null],[3,"UTF8","","Marker type for UTF-8 text.",null,null],[3,"WTF8","","Marker type for WTF-8 text.",null,null],[3,"Latin1","","Marker type for the single-byte encoding of the first 256 Unicode codepoints.",null,null],[0,"imp","","Implementation details.",null,null],[3,"Fixup","tendril::fmt::imp","Describes how to fix up encodings when concatenating.",null,null],[12,"drop_left","","",1,null],[12,"drop_right","","",1,null],[12,"insert_len","","",1,null],[12,"insert_bytes","","",1,null],[3,"SingleByteCharIndices","","",null,null],[11,"default","","",1,{"inputs":[{"name":"fixup"}],"output":{"name":"fixup"}}],[6,"Item","","",null,null],[11,"next","","",2,{"inputs":[{"name":"singlebytecharindices"}],"output":{"name":"option"}}],[11,"new","","",2,null],[8,"Format","tendril::fmt","Trait for format marker types.",null,null],[10,"validate","","Check whether the buffer is valid for this format.",3,null],[11,"validate_prefix","","Check whether the buffer is valid for this format.",3,null],[11,"validate_suffix","","Check whether the buffer is valid for this format.",3,null],[11,"validate_subseq","","Check whether the buffer is valid for this format.",3,null],[11,"fixup","","Compute any fixup needed when concatenating buffers.",3,null],[8,"SubsetOf","","Indicates that one format is a subset of another.",null,null],[11,"revalidate_subset","","Validate the *other* direction of conversion; check if\nthis buffer from the superset format conforms to the\nsubset format.",4,null],[8,"SliceFormat","","Indicates a format which corresponds to a Rust slice type,\nrepresenting exactly the same invariants.",null,null],[16,"Slice","tendril::fmt::SliceFormat","",null,null],[8,"CharFormat","tendril::fmt","Indicates a format which contains characters from Unicode\n(all of it, or some proper subset).",null,null],[16,"Iter","tendril::fmt::CharFormat","Iterator for characters and their byte indices.",null,null],[10,"char_indices","tendril::fmt","Iterate over the characters of the string and their byte\nindices.",5,null],[10,"encode_char","","Encode the character as bytes and pass them to a continuation.",5,{"inputs":[{"name":"charformat"},{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[8,"Slice","","Indicates a Rust slice type that has a corresponding format.",null,null],[16,"Format","tendril::fmt::Slice","",null,null],[10,"as_bytes","tendril::fmt","Access the raw bytes of the slice.",6,null],[10,"from_bytes","","Convert a byte slice to this kind of slice.",6,null],[11,"fmt","","",7,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"clone","","",7,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"validate","","",7,null],[6,"Slice","","",null,null],[6,"Format","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"ascii"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[{"name":"ascii"}],"output":{"name":"ascii"}}],[11,"clone","","",8,{"inputs":[{"name":"ascii"}],"output":{"name":"ascii"}}],[11,"validate","","",8,null],[11,"validate_prefix","","",8,null],[11,"validate_suffix","","",8,null],[11,"validate_subseq","","",8,null],[6,"Iter","","",null,null],[11,"char_indices","","",8,null],[11,"encode_char","","",8,{"inputs":[{"name":"ascii"},{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"utf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[{"name":"utf8"}],"output":{"name":"utf8"}}],[11,"clone","","",9,{"inputs":[{"name":"utf8"}],"output":{"name":"utf8"}}],[11,"validate","","",9,null],[11,"validate_prefix","","",9,null],[11,"validate_suffix","","",9,null],[11,"validate_subseq","","",9,null],[6,"Slice","","",null,null],[6,"Format","","",null,null],[6,"Iter","","",null,null],[11,"char_indices","","",9,null],[11,"encode_char","","",9,{"inputs":[{"name":"utf8"},{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8"}}],[11,"clone","","",10,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8"}}],[11,"validate","","",10,null],[11,"validate_prefix","","",10,null],[11,"validate_suffix","","",10,null],[11,"validate_subseq","","",10,null],[11,"fixup","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"latin1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[{"name":"latin1"}],"output":{"name":"latin1"}}],[11,"clone","","",11,{"inputs":[{"name":"latin1"}],"output":{"name":"latin1"}}],[11,"validate","","",11,null],[11,"validate_prefix","","",11,null],[11,"validate_suffix","","",11,null],[11,"validate_subseq","","",11,null],[6,"Iter","","",null,null],[11,"char_indices","","",11,null],[11,"encode_char","","",11,{"inputs":[{"name":"latin1"},{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","tendril","",0,{"inputs":[{"name":"subtendrilerror"},{"name":"subtendrilerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"subtendrilerror"},{"name":"subtendrilerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"subtendrilerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"subtendrilerror"}],"output":{"name":"subtendrilerror"}}],[11,"clone","","",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"drop","","",12,{"inputs":[{"name":"tendril"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"tendril"}],"output":{"name":"f"}}],[11,"extend","","",12,{"inputs":[{"name":"tendril"},{"name":"i"}],"output":null}],[11,"eq","","",12,{"inputs":[{"name":"tendril"},{"name":"tendril"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"tendril"},{"name":"tendril"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"tendril"},{"name":"tendril"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"tendril"},{"name":"tendril"}],"output":{"name":"ordering"}}],[11,"default","","",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"fmt","","",12,{"inputs":[{"name":"tendril"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,{"inputs":[{"name":"tendril"},{"name":"h"}],"output":null}],[11,"new","","Create a new, empty `Tendril` in any format.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"with_capacity","","Create a new, empty `Tendril` with a specified capacity.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":{"name":"tendril"}}],[11,"reserve","","Reserve space for additional bytes.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":null}],[11,"len32","","Get the length of the `Tendril`.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"u32"}}],[11,"is_shared","","Is the backing buffer shared?",12,{"inputs":[{"name":"tendril"}],"output":{"name":"bool"}}],[11,"is_shared_with","","Is the backing buffer shared with this other `Tendril`?",12,{"inputs":[{"name":"tendril"},{"name":"tendril"}],"output":{"name":"bool"}}],[11,"clear","","Truncate to length 0 without discarding any owned storage.",12,{"inputs":[{"name":"tendril"}],"output":null}],[11,"try_from_byte_slice","","Build a `Tendril` by copying a byte slice, if it conforms to the format.",12,null],[11,"as_bytes","","View as uninterpreted bytes.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"into_bytes","","Convert into uninterpreted bytes.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"as_superset","","View as a superset format, for free.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"into_superset","","Convert into a superset format, for free.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"try_as_subset","","View as a subset format, if the `Tendril` conforms to that subset.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"result"}}],[11,"try_into_subset","","Convert into a subset format, if the `Tendril` conforms to that subset.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"result"}}],[11,"try_reinterpret_view","","View as another format, if the bytes of the `Tendril` are valid for\nthat format.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"result"}}],[11,"try_reinterpret","","Convert into another format, if the `Tendril` conforms to that format.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"result"}}],[11,"try_push_bytes","","Push some bytes onto the end of the `Tendril`, if they conform to the\nformat.",12,null],[11,"push_tendril","","Push another `Tendril` onto the end of this one.",12,{"inputs":[{"name":"tendril"},{"name":"tendril"}],"output":null}],[11,"try_subtendril","","Attempt to slice this `Tendril` as a new `Tendril`.",12,{"inputs":[{"name":"tendril"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"subtendril","","Slice this `Tendril` as a new `Tendril`.",12,{"inputs":[{"name":"tendril"},{"name":"u32"},{"name":"u32"}],"output":{"name":"tendril"}}],[11,"try_pop_front","","Try to drop `n` bytes from the front.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":{"name":"result"}}],[11,"pop_front","","Drop `n` bytes from the front.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":null}],[11,"try_pop_back","","Drop `n` bytes from the back.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":{"name":"result"}}],[11,"pop_back","","Drop `n` bytes from the back.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":null}],[11,"reinterpret_view_without_validating","","View as another format, without validating.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"reinterpret_without_validating","","Convert into another format, without validating.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"tendril"}}],[11,"from_byte_slice_without_validating","","Build a `Tendril` by copying a byte slice, without validating.",12,null],[11,"push_bytes_without_validating","","Push some bytes onto the end of the `Tendril`, without validating.",12,null],[11,"unsafe_subtendril","","Slice this `Tendril` as a new `Tendril`.",12,{"inputs":[{"name":"tendril"},{"name":"u32"},{"name":"u32"}],"output":{"name":"tendril"}}],[11,"unsafe_pop_front","","Drop `n` bytes from the front.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":null}],[11,"unsafe_pop_back","","Drop `n` bytes from the back.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":null}],[11,"from_slice","","Build a `Tendril` by copying a slice.",12,{"inputs":[{"name":"tendril"},{"name":"f"}],"output":{"name":"tendril"}}],[11,"push_slice","","Push a slice onto the end of the `Tendril`.",12,{"inputs":[{"name":"tendril"},{"name":"f"}],"output":null}],[11,"pop_front_char","","Remove and return the first character, if any.",12,{"inputs":[{"name":"tendril"}],"output":{"name":"option"}}],[11,"pop_front_char_run","","Remove and return a run of characters at the front of the `Tendril`\nwhich are classified the same according to the function `classify`.",12,{"inputs":[{"name":"tendril"},{"name":"c"}],"output":{"name":"option"}}],[11,"try_push_char","","Push a character, if it can be represented in this format.",12,{"inputs":[{"name":"tendril"},{"name":"char"}],"output":{"name":"result"}}],[11,"deref_mut","","",12,null],[11,"write","","",12,null],[11,"write_all","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"tendril"}],"output":{"name":"result"}}],[11,"write_byte","","",12,{"inputs":[{"name":"tendril"},{"name":"u8"}],"output":null}],[11,"write_bytes","","",12,null],[11,"writer_hint","","",12,{"inputs":[{"name":"tendril"},{"name":"usize"}],"output":null}],[11,"decode","","Decode from some character encoding into UTF-8.",12,{"inputs":[{"name":"tendril"},{"name":"encodingref"},{"name":"decodertrap"}],"output":{"name":"result"}}],[11,"push_uninitialized","","Push \"uninitialized bytes\" onto the end.",12,{"inputs":[{"name":"tendril"},{"name":"u32"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"tendril"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"tendril"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","",12,{"inputs":[{"name":"tendril"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",12,{"inputs":[{"name":"tendril"},{"name":"char"}],"output":null}],[11,"write_str","","",12,{"inputs":[{"name":"tendril"},{"name":"str"}],"output":null}],[11,"writer_hint","","",12,{"inputs":[{"name":"tendril"},{"name":"usize"}],"output":null}],[11,"encode","","Encode from UTF-8 into some other character encoding.",12,{"inputs":[{"name":"tendril"},{"name":"encodingref"},{"name":"encodertrap"}],"output":{"name":"result"}}],[11,"push_char","","Push a character onto the end.",12,{"inputs":[{"name":"tendril"},{"name":"char"}],"output":null}],[11,"format","","Helper for the `format_tendril!` macro.",12,{"inputs":[{"name":"tendril"},{"name":"arguments"}],"output":{"name":"tendril"}}],[6,"ByteTendril","","`Tendril` for storing binary data.",null,null],[6,"StrTendril","","`Tendril` for storing native Rust strings.",null,null],[8,"SliceExt","","`Tendril`-related methods for Rust slices.",null,null],[11,"to_tendril","","Make a `Tendril` from this slice.",13,{"inputs":[{"name":"sliceext"}],"output":{"name":"tendril"}}],[14,"format_tendril!","","Create a `StrTendril` through string formatting.",null,null],[11,"to_tendril","","Make a `Tendril` from this slice.",13,null]],"paths":[[4,"SubtendrilError"],[3,"Fixup"],[3,"SingleByteCharIndices"],[8,"Format"],[8,"SubsetOf"],[8,"CharFormat"],[8,"Slice"],[3,"Bytes"],[3,"ASCII"],[3,"UTF8"],[3,"WTF8"],[3,"Latin1"],[3,"Tendril"],[8,"SliceExt"]]};
searchIndex['encoding'] = {"items":[[0,"","encoding","# Encoding 0.2.29",null,null],[0,"types","","Interface to the character encoding.",null,null],[3,"CodecError","encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0,null],[12,"cause","","A human-readable cause of the error.",0,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",1,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG \"replacement\" error algorithm.",1,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1,null],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG \"fatal\" error algorithm.",2,null],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG \"URL\" error algorithms.",2,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG \"<form>\" error algorithms.",2,null],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding.",null,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3,{"inputs":[{"name":"bytewriter"},{"name":"usize"}],"output":null}],[10,"write_byte","","Writes a single byte.",3,{"inputs":[{"name":"bytewriter"},{"name":"u8"}],"output":null}],[10,"write_bytes","","Writes a number of bytes.",3,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4,{"inputs":[{"name":"stringwriter"},{"name":"usize"}],"output":null}],[10,"write_char","","Writes a single character.",4,{"inputs":[{"name":"stringwriter"},{"name":"char"}],"output":null}],[10,"write_str","","Writes a string.",4,{"inputs":[{"name":"stringwriter"},{"name":"str"}],"output":null}],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5,{"inputs":[{"name":"rawencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5,{"inputs":[{"name":"rawencoder"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5,null],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5,{"inputs":[{"name":"rawencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,{"inputs":[{"name":"rawdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,{"inputs":[{"name":"rawdecoder"}],"output":{"name":"bool"}}],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6,{"inputs":[{"name":"rawdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"option"}}],[10,"raw_encoder","","Creates a new encoder.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"box"}}],[10,"raw_decoder","","Creates a new decoder.",7,{"inputs":[{"name":"encoding"}],"output":{"name":"box"}}],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7,{"inputs":[{"name":"encoding"},{"name":"str"},{"name":"encodertrap"}],"output":{"name":"result"}}],[11,"encode_to","","Encode into a `ByteWriter`.",7,{"inputs":[{"name":"encoding"},{"name":"str"},{"name":"encodertrap"},{"name":"bytewriter"}],"output":{"name":"result"}}],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7,null],[11,"decode_to","","Decode into a `StringWriter`.",7,null],[11,"writer_hint","collections::vec","",8,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"write_byte","","",8,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[11,"write_bytes","","",8,null],[11,"writer_hint","collections::string","",9,{"inputs":[{"name":"string"},{"name":"usize"}],"output":null}],[11,"write_char","","",9,{"inputs":[{"name":"string"},{"name":"char"}],"output":null}],[11,"write_str","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":null}],[11,"trap","encoding::types","Handles a decoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",1,null],[11,"clone","","",1,{"inputs":[{"name":"decodertrap"}],"output":{"name":"decodertrap"}}],[11,"trap","","Handles an encoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",2,{"inputs":[{"name":"encodertrap"},{"name":"rawencoder"},{"name":"str"},{"name":"bytewriter"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"encodertrap"}],"output":{"name":"encodertrap"}}],[0,"codec","encoding","Codec implementations.",null,null],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[11,"clone","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"errorencoding"}}],[11,"name","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"str"}}],[11,"raw_encoder","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",10,{"inputs":[{"name":"errorencoding"}],"output":{"name":"box"}}],[11,"clone","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"errorencoder"}}],[11,"new","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"box"}}],[11,"from_self","","",11,{"inputs":[{"name":"errorencoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",11,null],[11,"raw_finish","","",11,{"inputs":[{"name":"errorencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"errordecoder"}}],[11,"new","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"box"}}],[11,"from_self","","",12,{"inputs":[{"name":"errordecoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",12,null],[11,"raw_finish","","",12,{"inputs":[{"name":"errordecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"ascii","encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[11,"clone","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"asciiencoding"}}],[11,"name","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"str"}}],[11,"raw_encoder","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",13,{"inputs":[{"name":"asciiencoding"}],"output":{"name":"box"}}],[11,"clone","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"asciiencoder"}}],[11,"new","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"box"}}],[11,"from_self","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",14,{"inputs":[{"name":"asciiencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",14,null],[11,"raw_finish","","",14,{"inputs":[{"name":"asciiencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"asciidecoder"}}],[11,"new","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"box"}}],[11,"from_self","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",15,{"inputs":[{"name":"asciidecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",15,null],[11,"raw_finish","","",15,{"inputs":[{"name":"asciidecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",16,null],[12,"whatwg_name","","",16,null],[12,"index_forward","","",16,null],[12,"index_backward","","",16,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::singlebyte","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"singlebyteencoding"}}],[11,"name","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",16,{"inputs":[{"name":"singlebyteencoding"}],"output":{"name":"box"}}],[11,"clone","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"singlebyteencoder"}}],[11,"new","","",17,null],[11,"from_self","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",17,{"inputs":[{"name":"singlebyteencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",17,null],[11,"raw_finish","","",17,{"inputs":[{"name":"singlebyteencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"singlebytedecoder"}}],[11,"new","","",18,null],[11,"from_self","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",18,{"inputs":[{"name":"singlebytedecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",18,null],[11,"raw_finish","","",18,{"inputs":[{"name":"singlebytedecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_8","encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib's UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string.",null,null],[11,"clone","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"utf8encoding"}}],[11,"name","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",19,{"inputs":[{"name":"utf8encoding"}],"output":{"name":"box"}}],[11,"clone","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"utf8encoder"}}],[11,"new","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"box"}}],[11,"from_self","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",20,{"inputs":[{"name":"utf8encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",20,null],[11,"raw_finish","","",20,{"inputs":[{"name":"utf8encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"utf8decoder"}}],[11,"new","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"box"}}],[11,"from_self","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",21,{"inputs":[{"name":"utf8decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",21,null],[11,"raw_finish","","",21,{"inputs":[{"name":"utf8decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"utf_16","encoding::codec","UTF-16.",null,null],[3,"Little","encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[11,"clone","","",22,{"inputs":[{"name":"little"}],"output":{"name":"little"}}],[11,"clone","","",23,{"inputs":[{"name":"big"}],"output":{"name":"big"}}],[11,"clone","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"utf16encoding"}}],[11,"name","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",24,{"inputs":[{"name":"utf16encoding"}],"output":{"name":"box"}}],[11,"clone","","",25,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"utf16encoder"}}],[11,"from_self","","",25,{"inputs":[{"name":"utf16encoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",25,null],[11,"raw_finish","","",25,{"inputs":[{"name":"utf16encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"new","","",26,{"inputs":[{"name":"utf16decoder"}],"output":{"name":"box"}}],[11,"from_self","","",26,{"inputs":[{"name":"utf16decoder"}],"output":{"name":"box"}}],[11,"raw_feed","","",26,null],[11,"raw_finish","","",26,{"inputs":[{"name":"utf16decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[3,"Windows949Decoder","","A decoder for Windows code page 949.",null,null],[11,"clone","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"windows949encoding"}}],[11,"name","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",27,{"inputs":[{"name":"windows949encoding"}],"output":{"name":"box"}}],[11,"clone","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"windows949encoder"}}],[11,"new","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"box"}}],[11,"from_self","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",28,{"inputs":[{"name":"windows949encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",28,null],[11,"raw_finish","","",28,{"inputs":[{"name":"windows949encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"windows949decoder"}}],[11,"new","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"box"}}],[11,"from_self","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",29,{"inputs":[{"name":"windows949decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",29,null],[11,"raw_finish","","",29,{"inputs":[{"name":"windows949decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"EUCJP0212Decoder","","A decoder for EUC-JP with JIS X 0212 in G3.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JDecoder","","A decoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[3,"ISO2022JPDecoder","","A decoder for ISO-2022-JP with JIS X 0212 support.",null,null],[11,"clone","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"eucjpencoding"}}],[11,"name","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",30,{"inputs":[{"name":"eucjpencoding"}],"output":{"name":"box"}}],[11,"clone","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"eucjpencoder"}}],[11,"new","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"box"}}],[11,"from_self","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",31,{"inputs":[{"name":"eucjpencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",31,null],[11,"raw_finish","","",31,{"inputs":[{"name":"eucjpencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"eucjp0212decoder"}}],[11,"new","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"box"}}],[11,"from_self","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",32,{"inputs":[{"name":"eucjp0212decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",32,null],[11,"raw_finish","","",32,{"inputs":[{"name":"eucjp0212decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"windows31jencoding"}}],[11,"name","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",33,{"inputs":[{"name":"windows31jencoding"}],"output":{"name":"box"}}],[11,"clone","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"windows31jencoder"}}],[11,"new","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"box"}}],[11,"from_self","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",34,{"inputs":[{"name":"windows31jencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",34,null],[11,"raw_finish","","",34,{"inputs":[{"name":"windows31jencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"windows31jdecoder"}}],[11,"new","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"box"}}],[11,"from_self","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",35,{"inputs":[{"name":"windows31jdecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",35,null],[11,"raw_finish","","",35,{"inputs":[{"name":"windows31jdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[11,"clone","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"iso2022jpencoding"}}],[11,"name","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",36,{"inputs":[{"name":"iso2022jpencoding"}],"output":{"name":"box"}}],[11,"clone","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"iso2022jpencoder"}}],[11,"new","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"box"}}],[11,"from_self","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",37,{"inputs":[{"name":"iso2022jpencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",37,null],[11,"raw_finish","","",37,{"inputs":[{"name":"iso2022jpencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"iso2022jpdecoder"}}],[11,"new","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"box"}}],[11,"from_self","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",38,{"inputs":[{"name":"iso2022jpdecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",38,null],[11,"raw_finish","","",38,{"inputs":[{"name":"iso2022jpdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GB18030Encoding","encoding::codec::simpchinese","GB 18030-2005.",null,null],[3,"GB18030Encoder","","An encoder for GB 18030.",null,null],[3,"GB18030Decoder","","A decoder for GB 18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[3,"HZDecoder","","A decoder for HZ.",null,null],[11,"clone","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"gb18030encoding"}}],[11,"name","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",39,{"inputs":[{"name":"gb18030encoding"}],"output":{"name":"box"}}],[11,"clone","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"gb18030encoder"}}],[11,"new","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"box"}}],[11,"from_self","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",40,{"inputs":[{"name":"gb18030encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",40,null],[11,"raw_finish","","",40,{"inputs":[{"name":"gb18030encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"gb18030decoder"}}],[11,"new","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"box"}}],[11,"from_self","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",41,{"inputs":[{"name":"gb18030decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",41,null],[11,"raw_finish","","",41,{"inputs":[{"name":"gb18030decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"hzencoding"}}],[11,"name","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",42,{"inputs":[{"name":"hzencoding"}],"output":{"name":"box"}}],[11,"clone","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"hzencoder"}}],[11,"new","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"box"}}],[11,"from_self","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",43,{"inputs":[{"name":"hzencoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",43,null],[11,"raw_finish","","",43,{"inputs":[{"name":"hzencoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"hzdecoder"}}],[11,"new","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"box"}}],[11,"from_self","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",44,{"inputs":[{"name":"hzdecoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",44,null],[11,"raw_finish","","",44,{"inputs":[{"name":"hzdecoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[3,"BigFive2003HKSCS2008Decoder","","A decoder for Big5-2003 with HKSCS-2008 extension.",null,null],[11,"clone","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"bigfive2003encoding"}}],[11,"name","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",45,{"inputs":[{"name":"bigfive2003encoding"}],"output":{"name":"box"}}],[11,"clone","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"bigfive2003encoder"}}],[11,"new","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"box"}}],[11,"from_self","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",46,{"inputs":[{"name":"bigfive2003encoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",46,null],[11,"raw_finish","","",46,{"inputs":[{"name":"bigfive2003encoder"},{"name":"bytewriter"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"bigfive2003hkscs2008decoder"}}],[11,"new","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"box"}}],[11,"from_self","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"box"}}],[11,"is_ascii_compatible","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"}],"output":{"name":"bool"}}],[11,"raw_feed","","",47,null],[11,"raw_finish","","",47,{"inputs":[{"name":"bigfive2003hkscs2008decoder"},{"name":"stringwriter"}],"output":{"name":"option"}}],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::whatwg","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"encoderonlyutf8encoding"}}],[11,"name","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"str"}}],[11,"whatwg_name","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"option"}}],[11,"raw_encoder","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"box"}}],[11,"raw_decoder","","",48,{"inputs":[{"name":"encoderonlyutf8encoding"}],"output":{"name":"box"}}],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[0,"whatwg","encoding::all","",null,null],[7,"X_USER_DEFINED","encoding::all::whatwg","",null,null],[7,"ISO_8859_8_I","","",null,null],[7,"REPLACEMENT","","",null,null],[7,"ERROR","encoding::all","",null,null],[7,"ASCII","","",null,null],[7,"IBM866","","",null,null],[7,"ISO_8859_1","","",null,null],[7,"ISO_8859_2","","",null,null],[7,"ISO_8859_3","","",null,null],[7,"ISO_8859_4","","",null,null],[7,"ISO_8859_5","","",null,null],[7,"ISO_8859_6","","",null,null],[7,"ISO_8859_7","","",null,null],[7,"ISO_8859_8","","",null,null],[7,"ISO_8859_10","","",null,null],[7,"ISO_8859_13","","",null,null],[7,"ISO_8859_14","","",null,null],[7,"ISO_8859_15","","",null,null],[7,"ISO_8859_16","","",null,null],[7,"KOI8_R","","",null,null],[7,"KOI8_U","","",null,null],[7,"MAC_ROMAN","","",null,null],[7,"WINDOWS_874","","",null,null],[7,"WINDOWS_1250","","",null,null],[7,"WINDOWS_1251","","",null,null],[7,"WINDOWS_1252","","",null,null],[7,"WINDOWS_1253","","",null,null],[7,"WINDOWS_1254","","",null,null],[7,"WINDOWS_1255","","",null,null],[7,"WINDOWS_1256","","",null,null],[7,"WINDOWS_1257","","",null,null],[7,"WINDOWS_1258","","",null,null],[7,"MAC_CYRILLIC","","",null,null],[7,"UTF_8","","",null,null],[7,"UTF_16LE","","",null,null],[7,"UTF_16BE","","",null,null],[7,"WINDOWS_949","","",null,null],[7,"EUC_JP","","",null,null],[7,"WINDOWS_31J","","",null,null],[7,"ISO_2022_JP","","",null,null],[7,"GB18030","","",null,null],[7,"HZ","","",null,null],[7,"BIG5_2003","","",null,null],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements \"get an encoding\" algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"Vec"],[3,"String"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"Windows949Decoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"EUCJP0212Decoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"Windows31JDecoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"ISO2022JPDecoder"],[3,"GB18030Encoding"],[3,"GB18030Encoder"],[3,"GB18030Decoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"HZDecoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"BigFive2003HKSCS2008Decoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex['encoding_index_simpchinese'] = {"items":[[0,"","encoding_index_simpchinese","Simplified Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"gb18030","","GB 18030 two-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"gb18030_ranges","encoding_index_simpchinese","GB 18030 four-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex['encoding_index_singlebyte'] = {"items":[[0,"","encoding_index_singlebyte","Single-byte index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"ibm866","","IBM code page 866.",null,null],[5,"forward","encoding_index_singlebyte::ibm866","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_2","encoding_index_singlebyte","ISO 8859-2.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_3","encoding_index_singlebyte","ISO 8859-3.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_4","encoding_index_singlebyte","ISO 8859-4.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_5","encoding_index_singlebyte","ISO 8859-5.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_6","encoding_index_singlebyte","ISO 8859-6.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_7","encoding_index_singlebyte","ISO 8859-7.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_8","encoding_index_singlebyte","ISO 8859-8 (either visual or logical).",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_10","encoding_index_singlebyte","ISO 8859-10.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_13","encoding_index_singlebyte","ISO 8859-13.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_14","encoding_index_singlebyte","ISO 8859-14.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_15","encoding_index_singlebyte","ISO 8859-15.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_16","encoding_index_singlebyte","ISO 8859-16.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_r","encoding_index_singlebyte","KOI8-R.",null,null],[5,"forward","encoding_index_singlebyte::koi8_r","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_u","encoding_index_singlebyte","KOI8-U.",null,null],[5,"forward","encoding_index_singlebyte::koi8_u","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"macintosh","encoding_index_singlebyte","MacRoman.",null,null],[5,"forward","encoding_index_singlebyte::macintosh","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_874","encoding_index_singlebyte","Windows code page 874.",null,null],[5,"forward","encoding_index_singlebyte::windows_874","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1250","encoding_index_singlebyte","Windows code page 1250.",null,null],[5,"forward","encoding_index_singlebyte::windows_1250","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1251","encoding_index_singlebyte","Windows code page 1251.",null,null],[5,"forward","encoding_index_singlebyte::windows_1251","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1252","encoding_index_singlebyte","Windows code page 1252.",null,null],[5,"forward","encoding_index_singlebyte::windows_1252","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1253","encoding_index_singlebyte","Windows code page 1253.",null,null],[5,"forward","encoding_index_singlebyte::windows_1253","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1254","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1254","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1255","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1255","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1256","encoding_index_singlebyte","Windows code page 1256.",null,null],[5,"forward","encoding_index_singlebyte::windows_1256","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1257","encoding_index_singlebyte","Windows code page 1257.",null,null],[5,"forward","encoding_index_singlebyte::windows_1257","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1258","encoding_index_singlebyte","Windows code page 1258.",null,null],[5,"forward","encoding_index_singlebyte::windows_1258","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"x_mac_cyrillic","encoding_index_singlebyte","MacCyrillic.",null,null],[5,"forward","encoding_index_singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}]],"paths":[]};
searchIndex['encoding_index_tradchinese'] = {"items":[[0,"","encoding_index_tradchinese","Traditional Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"big5","","Big5 and HKSCS.",null,null],[5,"forward","encoding_index_tradchinese::big5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['encoding_index_korean'] = {"items":[[0,"","encoding_index_korean","Korean index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"euc_kr","","KS X 1001 plus Unified Hangul Code.",null,null],[5,"forward","encoding_index_korean::euc_kr","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['futf'] = {"items":[[0,"","futf","",null,null],[3,"Codepoint","","Represents a complete or partial UTF-8 codepoint.",null,null],[12,"bytes","","The bytes that make up the partial or full codepoint.",0,null],[12,"rewind","","Start of the codepoint in the buffer, expressed as an offset\nback from `idx`.",0,null],[12,"meaning","","Meaning of the partial or full codepoint.",0,null],[4,"Meaning","","Meaning of a complete or partial UTF-8 codepoint.",null,null],[13,"Whole","","We found a whole codepoint.",1,null],[13,"LeadSurrogate","","We found something that isn't a valid Unicode codepoint, but\nit *would* correspond to a UTF-16 leading surrogate code unit,\ni.e. a value in the range `U+D800` - `U+DBFF`.",1,null],[13,"TrailSurrogate","","We found something that isn't a valid Unicode codepoint, but\nit *would* correspond to a UTF-16 trailing surrogate code unit,\ni.e. a value in the range `U+DC00` - `U+DFFF`.",1,null],[13,"Prefix","","We found only a prefix of a codepoint before the buffer ended.",1,null],[13,"Suffix","","We found only a suffix of a codepoint before running off the\nstart of the buffer.",1,null],[5,"classify","","Describes the UTF-8 codepoint containing the byte at index `idx` within\n`buf`.",null,null],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"meaning"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"meaning"},{"name":"meaning"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"meaning"}],"output":{"name":"meaning"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}]],"paths":[[3,"Codepoint"],[4,"Meaning"]]};
searchIndex['encoding_index_japanese'] = {"items":[[0,"","encoding_index_japanese","Japanese index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).",null,null],[0,"jis0208","","JIS X 0208 with common extensions.",null,null],[5,"forward","encoding_index_japanese::jis0208","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"jis0212","encoding_index_japanese","JIS X 0212.",null,null],[5,"forward","encoding_index_japanese::jis0212","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex['mac'] = {"items":[[0,"","mac","# mac",null,null],[0,"test","","Macros for writing test suites.",null,null],[0,"mem","","Macros for low-level memory manipulation.",null,null],[0,"format","","Macros for string formatting.",null,null],[0,"syntax_ext","","Macros useful when writing procedural syntax extensions.",null,null],[0,"matches","","Pattern Matching macros.",null,null],[14,"test_eq!","","Generate a test function `$name` which asserts that `$left` and `$right`\nare equal.",null,null],[14,"addrs_of!","","Make a tuple of the addresses of some of a struct's fields.",null,null],[14,"format_if!","","Conditionally perform string formatting.",null,null],[14,"ext_bail!","","Call `span_err` on an `ExtCtxt` and return `DummyResult::any`.",null,null],[14,"ext_bail_if!","","`ext_bail!` if the condition `$e` is true.",null,null],[14,"ext_expect!","","Unwrap the `Option` `$e`, or `ext_bail!`.",null,null],[14,"matches!","","Returns true if an expression matches a pattern.",null,null],[14,"unwrap_or_return!","","Unwraps an `Option` or returns from the function with the specified return\nvalue.",null,null],[14,"do_while!","","Do-while loop.",null,null]],"paths":[]};
searchIndex['encoding_index_tests'] = {"items":[[0,"","encoding_index_tests","Macros and utilities for testing indices.",null,null],[14,"single_byte_tests!","","Makes a common test suite for single-byte indices.",null,null],[14,"multi_byte_tests!","","Makes a common test suite for multi-byte indices.",null,null],[14,"multi_byte_range_tests!","","Makes a common test suite for multi-byte range indices.",null,null]],"paths":[]};
initSearch(searchIndex);
